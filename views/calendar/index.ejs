<!-- Calendar Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
  <div>
    <h1 class="h3 mb-0">Calendar</h1>
    <p class="text-muted">View and manage your tasks and project deadlines</p>
  </div>
  <div class="btn-group">
    <button type="button" class="btn btn-outline-primary" id="todayBtn">Today</button>
    <button type="button" class="btn btn-outline-primary" id="prevBtn">
      <i class="fas fa-chevron-left"></i>
    </button>
    <button type="button" class="btn btn-outline-primary" id="nextBtn">
      <i class="fas fa-chevron-right"></i>
    </button>
  </div>
</div>

<!-- Calendar Filters -->
<div class="card mb-4">
  <div class="card-body">
    <div class="row g-3">
      <div class="col-md-3">
        <label class="form-label">View</label>
        <select class="form-select" id="calendarView">
          <option value="dayGridMonth">Month</option>
          <option value="timeGridWeek">Week</option>
          <option value="timeGridDay">Day</option>
          <option value="listWeek">List</option>
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label">Show</label>
        <div class="d-flex gap-3">
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="showTasks" checked>
            <label class="form-check-label" for="showTasks">Tasks</label>
          </div>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="showProjects" checked>
            <label class="form-check-label" for="showProjects">Projects</label>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <label class="form-label">Project</label>
        <select class="form-select" id="projectFilter">
          <option value="">All Projects</option>
          <% if (projects && projects.length > 0) { %>
            <% projects.forEach(project => { %>
              <option value="<%= project._id %>"><%= project.name %></option>
            <% }); %>
          <% } %>
        </select>
      </div>
      <div class="col-md-3">
        <label class="form-label">Status</label>
        <select class="form-select" id="statusFilter">
          <option value="">All Statuses</option>
          <% Object.entries(taskStatus).forEach(([key, value]) => { %>
            <option value="<%= value %>">
              <%= value.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %>
            </option>
          <% }); %>
        </select>
      </div>
      <div class="col-md-auto d-flex align-items-end">
        <button type="button" class="btn btn-outline-secondary w-100" id="initializeFiltersBtn">
          <i class="fas fa-sync-alt me-2"></i>Initialize Filters
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Calendar -->
<div class="card">
  <div class="card-body">
    <div id="calendar"></div>
  </div>
</div>

<!-- Task Details Modal -->
<div class="modal fade" id="taskModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Task Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="taskDetails"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a href="#" class="btn btn-primary" id="viewTaskBtn">View Task</a>
      </div>
    </div>
  </div>
</div>

<!-- Project Details Modal -->
<div class="modal fade" id="projectModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Project Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="projectDetails"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a href="#" class="btn btn-primary" id="viewProjectBtn">View Project</a>
      </div>
    </div>
  </div>
</div>

<!-- Include FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.10/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.10/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.10/main.min.css' rel='stylesheet' />
<link href='https://cdn.jsdelivr.net/npm/@fullcalendar/list@6.1.10/main.min.css' rel='stylesheet' />

<style>
.fc-event {
  cursor: pointer;
  border: none;
  padding: 2px 4px;
  font-size: 0.875rem;
}

.fc-event-task {
  background-color: #0d6efd;
  border-left: 4px solid #0d6efd;
}

.fc-event-project {
  background-color: #198754;
  border-left: 4px solid #198754;
}

.fc-event-task.todo { background-color: #6c757d; border-left-color: #6c757d; }
.fc-event-task.in_progress { background-color: #0dcaf0; border-left-color: #0dcaf0; }
.fc-event-task.review { background-color: #ffc107; border-left-color: #ffc107; }
.fc-event-task.completed { background-color: #198754; border-left-color: #198754; }

.fc-event-task.urgent { border-left-width: 8px; }
.fc-event-task.high { border-left-width: 6px; }
.fc-event-task.medium { border-left-width: 4px; }
.fc-event-task.low { border-left-width: 2px; }

.fc-toolbar-title {
  font-size: 1.25rem !important;
  font-weight: 500;
}

.fc-button-primary {
  background-color: #0d6efd !important;
  border-color: #0d6efd !important;
}

.fc-button-primary:hover {
  background-color: #0b5ed7 !important;
  border-color: #0a58ca !important;
}

.fc-button-primary:disabled {
  background-color: #0d6efd !important;
  border-color: #0d6efd !important;
}

.fc-button-primary:not(:disabled):active,
.fc-button-primary:not(:disabled).fc-button-active {
  background-color: #0a58ca !important;
  border-color: #0a53be !important;
}

.fc-event-title {
  font-weight: 500;
}

.fc-event-time {
  font-size: 0.75rem;
}

.task-detail-item {
  margin-bottom: 1rem;
}

.task-detail-label {
  font-weight: 500;
  color: #6c757d;
  margin-bottom: 0.25rem;
}

.task-detail-value {
  color: #212529;
}

.project-detail-item {
  margin-bottom: 1rem;
}

.project-detail-label {
  font-weight: 500;
  color: #6c757d;
  margin-bottom: 0.25rem;
}

.project-detail-value {
  color: #212529;
}

.badge {
  font-weight: 500;
  padding: 0.5em 0.75em;
}

#calendar {
  min-height: 700px;
  height: 700px;
}
</style>

<!-- Include FullCalendar JS -->
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.10/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.10/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.10/index.global.min.js'></script>
<script src='https://cdn.jsdelivr.net/npm/@fullcalendar/list@6.1.10/index.global.min.js'></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const calendarEl = document.getElementById('calendar');
  const calendarViewSelect = document.getElementById('calendarView');
  const projectFilterSelect = document.getElementById('projectFilter');
  const statusFilterSelect = document.getElementById('statusFilter');
  const showTasksCheckbox = document.getElementById('showTasks');
  const showProjectsCheckbox = document.getElementById('showProjects');
  const todayBtn = document.getElementById('todayBtn');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');

  let allEvents = <%- events %>;
  console.log('Calendar allEvents:', allEvents);

  let calendar;

  function initializeCalendar() {
    if (calendar) {
      calendar.destroy(); // Destroy existing calendar if it exists
    }

    calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: calendarViewSelect.value || 'dayGridMonth',
      headerToolbar: {
        left: 'title',
        center: '',
        right: '' // Buttons handled separately
      },
      events: filterEvents(),
      eventClassNames: function(arg) {
        // Add custom classes based on event type and status
        if (arg.event.extendedProps.type === 'task') {
          return ['fc-event-task', arg.event.extendedProps.status, arg.event.extendedProps.priority];
        } else if (arg.event.extendedProps.type === 'project_due') {
          return ['fc-event-project'];
        }
        return [];
      },
      eventClick: function(info) {
        if (info.event.extendedProps.type === 'task') {
          info.jsEvent.preventDefault(); // Prevent navigation
          showTaskDetails(info.event);
        } else if (info.event.extendedProps.type === 'project_due') {
          showProjectDetails(info.event);
        }
      }
    });
    calendar.render();
  }

  function filterEvents() {
    const selectedProject = projectFilterSelect.value;
    const selectedStatus = statusFilterSelect.value;
    const showTasks = showTasksCheckbox.checked;
    const showProjects = showProjectsCheckbox.checked;

    return allEvents.filter(event => {
      let matchesProject = true;
      if (selectedProject) {
        if (event.extendedProps.project) {
          if (typeof event.extendedProps.project === 'object' && event.extendedProps.project.id) {
            matchesProject = (event.extendedProps.project.id === selectedProject);
          } else if (typeof event.extendedProps.project === 'string') {
            matchesProject = (event.extendedProps.project === selectedProject);
          } else if (event.extendedProps.project && event.extendedProps.project.toString) {
            matchesProject = (event.extendedProps.project.toString() === selectedProject);
          } else {
            matchesProject = false;
          }
        } else {
          matchesProject = false;
        }
      }

      let matchesStatus = true;
      if (selectedStatus && event.extendedProps.type === 'task') {
        matchesStatus = (event.extendedProps.status === selectedStatus);
      }

      const isTask = (event.extendedProps.type === 'task');
      const isProject = (event.extendedProps.type === 'project_due');

      return (matchesProject && matchesStatus && ((showTasks && isTask) || (showProjects && isProject)));
    });
  }

  function showTaskDetails(event) {
    const taskDetailsEl = document.getElementById('taskDetails');
    const viewTaskBtn = document.getElementById('viewTaskBtn');

    taskDetailsEl.innerHTML = `
      <div class="task-detail-item">
        <div class="task-detail-label">Title:</div>
        <div class="task-detail-value">${event.title.replace('Task: ', '')}</div>
      </div>
      <div class="task-detail-item">
        <div class="task-detail-label">Project:</div>
        <div class="task-detail-value">${event.extendedProps.project || 'N/A'}</div>
      </div>
      <div class="task-detail-item">
        <div class="task-detail-label">Assigned To:</div>
        <div class="task-detail-value">${event.extendedProps.assignedTo || 'Unassigned'}</div>
      </div>
      <div class="task-detail-item">
        <div class="task-detail-label">Status:</div>
        <div class="task-detail-value"><span class="badge bg-secondary">${event.extendedProps.status.replace('_', ' ').replace(/\b\w/g, char => char.toUpperCase())}</span></div>
      </div>
      <div class="task-detail-item">
        <div class="task-detail-label">Priority:</div>
        <div class="task-detail-value"><span class="badge bg-info">${event.extendedProps.priority.replace(/\b\w/g, char => char.toUpperCase())}</span></div>
      </div>
      <div class="task-detail-item">
        <div class="task-detail-label">Due Date:</div>
        <div class="task-detail-value">${new Date(event.start).toLocaleDateString()}</div>
      </div>
    `;
    viewTaskBtn.href = event.url;
    const taskModal = new bootstrap.Modal(document.getElementById('taskModal'));
    taskModal.show();
  }

  function showProjectDetails(event) {
    const projectDetailsEl = document.getElementById('projectDetails');
    const viewProjectBtn = document.getElementById('viewProjectBtn');

    projectDetailsEl.innerHTML = `
      <div class="project-detail-item">
        <div class="project-detail-label">Project Name:</div>
        <div class="project-detail-value">${event.title.replace('Project Due: ', '')}</div>
      </div>
      <div class="project-detail-item">
        <div class="project-detail-label">Manager:</div>
        <div class="project-detail-value">${event.extendedProps.manager || 'N/A'}</div>
      </div>
      <div class="project-detail-item">
        <div class="project-detail-label">Status:</div>
        <div class="project-detail-value"><span class="badge bg-secondary">${event.extendedProps.status.replace('_', ' ').replace(/\b\w/g, char => char.toUpperCase())}</span></div>
      </div>
      <div class="project-detail-item">
        <div class="project-detail-label">Due Date:</div>
        <div class="project-detail-value">${new Date(event.start).toLocaleDateString()}</div>
      </div>
    `;
    viewProjectBtn.href = event.url;
    const projectModal = new bootstrap.Modal(document.getElementById('projectModal'));
    projectModal.show();
  }

  // Event Listeners for Filters and Navigation
  calendarViewSelect.addEventListener('change', () => {
    calendar.changeView(calendarViewSelect.value);
  });

  projectFilterSelect.addEventListener('change', () => {
    calendar.setOption('events', filterEvents());
  });

  statusFilterSelect.addEventListener('change', () => {
    calendar.setOption('events', filterEvents());
  });

  showTasksCheckbox.addEventListener('change', () => {
    calendar.setOption('events', filterEvents());
  });

  showProjectsCheckbox.addEventListener('change', () => {
    calendar.setOption('events', filterEvents());
  });

  todayBtn.addEventListener('click', () => {
    calendar.today();
  });

  prevBtn.addEventListener('click', () => {
    calendar.prev();
  });

  nextBtn.addEventListener('click', () => {
    calendar.next();
  });

  // Initialize Filters Button
  document.getElementById('initializeFiltersBtn').addEventListener('click', () => {
    calendarViewSelect.value = 'dayGridMonth';
    projectFilterSelect.value = '';
    statusFilterSelect.value = '';
    showTasksCheckbox.checked = true;
    showProjectsCheckbox.checked = true;
    initializeCalendar();
  });

  // Initialize calendar on page load
  initializeCalendar();
});
</script>
