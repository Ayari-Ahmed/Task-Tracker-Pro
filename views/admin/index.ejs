<!-- views/admin/index.ejs -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-0">Admin Panel</h1>
        <p class="text-muted">Manage users, roles, and system settings</p>
    </div>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">
        <i class="fas fa-user-plus me-2"></i>Create New User
    </button>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <span>User Management</span>
                <div class="input-group" style="width: 300px;">
                    <input type="text" class="form-control form-control-sm" id="searchUser" placeholder="Search users...">
                    <button class="btn btn-light btn-sm" type="button" id="clearSearch">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover align-middle mb-0">
                        <thead class="bg-light">
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Created At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <!-- Users will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div id="loadingSpinner" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading users...</p>
                </div>
                <div id="noUsersMessage" class="text-center py-5 d-none">
                    <i class="fas fa-users-slash fa-3x text-muted mb-3"></i>
                    <h5>No Users Found</h5>
                    <p class="text-muted">No users registered in the system yet.</p>
                </div>
                <div id="errorMessage" class="alert alert-danger d-none" role="alert"></div>
            </div>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createUserForm" class="needs-validation" novalidate>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                        <div class="invalid-feedback">Please enter the user's full name.</div>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                        <div class="invalid-feedback">Please enter a valid email address.</div>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                        <div class="invalid-feedback">Please enter a password.</div>
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <select class="form-select" id="role" name="role" required>
                            <option value="">Select Role</option>
                            <option value="team_member">Team Member</option>
                            <option value="project_manager">Project Manager</option>
                            <option value="admin">Admin</option>
                        </select>
                        <div class="invalid-feedback">Please select a role.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createUserBtn">
                        <i class="fas fa-user-plus me-2"></i>Create User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editUserForm" class="needs-validation" novalidate>
                <input type="hidden" id="editUserId" name="userId">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editName" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="editName" name="name" required>
                        <div class="invalid-feedback">Please enter the user's full name.</div>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="editEmail" name="email" required>
                        <div class="invalid-feedback">Please enter a valid email address.</div>
                    </div>
                    <div class="mb-3">
                        <label for="editRole" class="form-label">Role</label>
                        <select class="form-select" id="editRole" name="role" required>
                            <option value="">Select Role</option>
                            <option value="team_member">Team Member</option>
                            <option value="project_manager">Project Manager</option>
                            <option value="admin">Admin</option>
                        </select>
                        <div class="invalid-feedback">Please select a role.</div>
                    </div>
                    <div class="mb-3">
                        <label for="editPassword" class="form-label">New Password (leave blank to keep current)</label>
                        <input type="password" class="form-control" id="editPassword" name="password">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="editUserBtn">
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Delete User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this user? This action cannot be undone.</p>
                <p class="text-danger mb-0" id="deleteUserWarning"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteUser">
                    <i class="fas fa-trash-alt me-2"></i>Delete User
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const usersTableBody = document.getElementById('usersTableBody');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const noUsersMessage = document.getElementById('noUsersMessage');
    const errorMessage = document.getElementById('errorMessage');
    const searchInput = document.getElementById('searchUser');
    const clearSearchBtn = document.getElementById('clearSearch');
    let users = []; // Store all users for search functionality

    // Load users
    async function loadUsers() {
        try {
            loadingSpinner.classList.remove('d-none');
            errorMessage.classList.add('d-none');
            noUsersMessage.classList.add('d-none');
            usersTableBody.innerHTML = '';

            const response = await fetch('/api/users');
            const result = await response.json();

            if (result.success) {
                users = result.data;
                if (users.length > 0) {
                    renderUsers(users);
                } else {
                    noUsersMessage.classList.remove('d-none');
                }
            } else {
                throw new Error(result.message || 'Failed to load users');
            }
        } catch (error) {
            console.error('Error:', error);
            errorMessage.classList.remove('d-none');
            errorMessage.textContent = error.message || 'An error occurred while loading users.';
        } finally {
            loadingSpinner.classList.add('d-none');
        }
    }

    // Render users in table
    function renderUsers(usersToRender) {
        usersTableBody.innerHTML = '';
        usersToRender.forEach(user => {
            const row = `
                <tr>
                    <td>${user.name}</td>
                    <td>${user.email}</td>
                    <td><span class="badge bg-${getRoleBadgeColor(user.role)}">${formatRole(user.role)}</span></td>
                    <td>${new Date(user.createdAt).toLocaleDateString()}</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-primary edit-user-btn" data-user-id="${user._id}" title="Edit User">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-user-btn" data-user-id="${user._id}" title="Delete User">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            usersTableBody.insertAdjacentHTML('beforeend', row);
        });
    }

    // Format role for display
    function formatRole(role) {
        return role.replace('_', ' ').replace(/\b\w/g, char => char.toUpperCase());
    }

    // Get badge color based on role
    function getRoleBadgeColor(role) {
        switch (role) {
            case 'admin': return 'danger';
            case 'project_manager': return 'primary';
            default: return 'secondary';
        }
    }

    // Search functionality
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const filteredUsers = users.filter(user => 
            user.name.toLowerCase().includes(searchTerm) ||
            user.email.toLowerCase().includes(searchTerm) ||
            formatRole(user.role).toLowerCase().includes(searchTerm)
        );
        renderUsers(filteredUsers);
    });

    clearSearchBtn.addEventListener('click', function() {
        searchInput.value = '';
        renderUsers(users);
    });

    // Create User Form
    const createUserForm = document.getElementById('createUserForm');
    createUserForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!this.checkValidity()) {
            e.stopPropagation();
            this.classList.add('was-validated');
            return;
        }

        const createUserBtn = document.getElementById('createUserBtn');
        try {
            createUserBtn.disabled = true;
            createUserBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Creating...';

            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());

            const response = await fetch('/api/users', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                // Close modal and reset form
                const modal = bootstrap.Modal.getInstance(document.getElementById('createUserModal'));
                modal.hide();
                this.reset();
                this.classList.remove('was-validated');

                // Reload users
                await loadUsers();

                // Show success message
                alert('User created successfully!');
            } else {
                throw new Error(result.message || 'Failed to create user');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error creating user: ' + error.message);
        } finally {
            createUserBtn.disabled = false;
            createUserBtn.innerHTML = '<i class="fas fa-user-plus me-2"></i>Create User';
        }
    });

    // Edit User
    usersTableBody.addEventListener('click', async function(e) {
        if (e.target.closest('.edit-user-btn')) {
            const userId = e.target.closest('.edit-user-btn').dataset.userId;
            const user = users.find(u => u._id === userId);
            
            if (user) {
                document.getElementById('editUserId').value = user._id;
                document.getElementById('editName').value = user.name;
                document.getElementById('editEmail').value = user.email;
                document.getElementById('editRole').value = user.role;
                document.getElementById('editPassword').value = '';

                const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
                modal.show();
            }
        }
    });

    // Edit User Form
    const editUserForm = document.getElementById('editUserForm');
    editUserForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!this.checkValidity()) {
            e.stopPropagation();
            this.classList.add('was-validated');
            return;
        }

        const editUserBtn = document.getElementById('editUserBtn');
        try {
            editUserBtn.disabled = true;
            editUserBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';

            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            const userId = data.userId;
            delete data.userId;

            // Remove password if empty
            if (!data.password) {
                delete data.password;
            }

            const response = await fetch(`/api/users/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (result.success) {
                // Close modal and reset form
                const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                modal.hide();
                this.reset();
                this.classList.remove('was-validated');

                // Reload users
                await loadUsers();

                // Show success message
                alert('User updated successfully!');
            } else {
                throw new Error(result.message || 'Failed to update user');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error updating user: ' + error.message);
        } finally {
            editUserBtn.disabled = false;
            editUserBtn.innerHTML = '<i class="fas fa-save me-2"></i>Save Changes';
        }
    });

    // Delete User
    let userToDelete = null;
    usersTableBody.addEventListener('click', function(e) {
        if (e.target.closest('.delete-user-btn')) {
            const userId = e.target.closest('.delete-user-btn').dataset.userId;
            userToDelete = users.find(u => u._id === userId);
            
            if (userToDelete) {
                const warning = document.getElementById('deleteUserWarning');
                if (userToDelete.role === 'admin') {
                    warning.textContent = 'Warning: This user is an admin. Deleting an admin user may affect system functionality.';
                } else {
                    warning.textContent = '';
                }

                const modal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
                modal.show();
            }
        }
    });

    // Confirm Delete User
    document.getElementById('confirmDeleteUser').addEventListener('click', async function() {
        if (!userToDelete) return;

        const deleteBtn = this;
        try {
            deleteBtn.disabled = true;
            deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Deleting...';

            const response = await fetch(`/api/users/${userToDelete._id}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.success) {
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteUserModal'));
                modal.hide();

                // Reload users
                await loadUsers();

                // Show success message
                alert('User deleted successfully!');
            } else {
                throw new Error(result.message || 'Failed to delete user');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error deleting user: ' + error.message);
        } finally {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = '<i class="fas fa-trash-alt me-2"></i>Delete User';
            userToDelete = null;
        }
    });

    // Initial load
    loadUsers();
});
</script> 